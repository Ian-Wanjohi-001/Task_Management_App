import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { updateProject, updateAssignedMembersToProject } from "../redux/apiCall";
import { useForm } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import * as yup from "yup";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import Autocomplete from "@mui/material/Autocomplete";
import Chip from "@mui/material/Chip";
import {
  CircularProgress,
  Grid,
  Card,
  CardContent,
  Typography,
  Button,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
} from "@mui/material";
import { Edit as EditIcon, Delete as DeleteIcon, Close as CloseIcon } from "@mui/icons-material";
import { getProjectWithMembers } from "../redux/apiCall";

const schema = yup.object().shape({
  projectName: yup.string().required("Project name is required"),
  description: yup.string().required("Description is required"),
  startDate: yup.string().required("Start date is required"),
  endDate: yup.string().required("End date is required"),
  urgency: yup.string().required("Urgency is required"),
  category: yup.string().required("Category is required"),
});

const projectCategories = [
  { label: "Technology" },
  { label: "Marketing" },
  { label: "Sales" },
  { label: "Construction" },
  { label: "Event Management" },
  { label: "Finance" },
  { label: "Human Resources" },
  { label: "Research and Development" },
];

const urgencyOptions = [
  { label: "Low" },
  { label: "Medium" },
  { label: "High" },
];

const statusOptions = [
  { label: "Pending Start" },
  { label: "In Progress", disabled: true },
  { label: "Completed", disabled: true },
];

const formatData = (data) => {
  const formattedData = {};

  data.forEach((item) => {
    const projectId = item.projectId;
    const member = {
      user_id: item.user_id,
      username: item.username,
      email: item.email,
    };

    if (projectId in formattedData) {
      formattedData[projectId].members.push(member);
    } else {
      formattedData[projectId] = { project: item, members: [member] };
    }
  });

  const formattedList = Object.values(formattedData);

  return formattedList;
};

function ExistingProjects() {
  const dispatch = useDispatch();
  const projectWithMembers = useSelector((state) => state.projectWithMembers.projectWithMembers);
  const user = useSelector((state) => state.user.user);
  const userList = useSelector((state) => state.userList.userList);

  const [isLoading, setIsLoading] = useState(true);
  const [projectsWithMembers, setProjectsWithMembers] = useState([]);
  const [expandedProjectId, setExpandedProjectId] = useState(null);

  // Individual state variables for each dialog
  const [openProjectId, setOpenProjectId] = useState(null);
  const [editProjectData, setEditProjectData] = useState({});
  const [assignedMembersData, setAssignedMembersData] = useState([]);
  const [categoryData, setCategoryData] = useState(null);
  const [urgencyData, setUrgencyData] = useState(null);
  const [statusData, setStatusData] = useState(null);

  useEffect(() => {
    getProjectWithMembers(dispatch, user)
      .then((projectWithMembers) => {
        if (Array.isArray(projectWithMembers)) {
          const formattedData = formatData(projectWithMembers);
          setProjectsWithMembers(formattedData);
          setIsLoading(false);
        } else {
          console.log("Invalid data format");
          console.log(projectWithMembers);
          setIsLoading(false);
        }
      })
      .catch((error) => {
        console.log(error);
        setIsLoading(false);
      });
  }, [dispatch, user]);

  const formattedData = formatData(projectWithMembers);

  const { handleSubmit, register, formState: { errors }, setValue } = useForm({
    resolver: yupResolver(schema),
  });

  const handleMemberSelection = (event, selectedMembers) => {
    const validMembers = selectedMembers.filter((member) =>
      userList.some((user) => user.username === member.username)
    );
    setAssignedMembersData(validMembers.map((member) => member.user_id));
  };

  const formatDate = (dateStr) => {
    const date = new Date(dateStr);
    return date.toLocaleDateString("en-US");
  };

  const handleExpandMembers = (projectId) => {
    if (expandedProjectId === projectId) {
      setExpandedProjectId(null);
    } else {
      setExpandedProjectId(projectId);
    }
  };

  const handleOpen = (project) => {
    const formattedStartDate = formatDate(project.startDate);
    const formattedEndDate = formatDate(project.endDate);

    const newEditProject = {
      projectId: project.projectId,
      projectName: project.projectName,
      description: project.description,
      startDate: formattedStartDate,
      endDate: formattedEndDate,
      status: project.status,
      urgency: project.urgency,
      category: project.category,
    };

    setEditProjectData(newEditProject);
    setOpenProjectId(project.projectId);
  };

  const handleClose = () => {
    setOpenProjectId(null);
  };

  const handleSave = async () => {
    const isValidMembers = assignedMembersData.every((memberId) =>
      userList.some((user) => user.user_id === memberId)
    );

    if (!isValidMembers) {
      toast.error("Invalid member(s) entered");
      return;
    }

    try {
      const updatedProjectData = { ...editProjectData };
      const projectId = editProjectData.projectId;
      await updateProject(updatedProjectData, projectId, user, dispatch);

      await updateAssignedMembersToProject(
        projectId,
        assignedMembersData,
        user,
        dispatch
      );

      toast.success("Project updated successfully");
      setOpenProjectId(null);

      const updatedProjectsWithMembers = projectsWithMembers.map((project) => {
        if (project.project.projectId === projectId) {
          return {
            ...project,
            project: updatedProjectData,
          };
        } else {
          return project;
        }
      });
      setProjectsWithMembers(updatedProjectsWithMembers);
    } catch (error) {
      toast.error("Failed to update project");
      console.log(error);
    }
  };

  return (
    <>
      <div>
        {isLoading ? (
          <div
            style={{
              display: "flex",
              height: "100vh",
              width: "80vw",
              alignItems: "center",
              justifyContent: "center",
            }}
          >
            <CircularProgress />
          </div>
        ) : projectWithMembers && projectWithMembers.length > 0 ? (
          <Grid container spacing={3}>
            {formattedData.map((project, index) => (
              <Grid item xs={12} sm={6} md={4} key={index}>
                <Card>
                  <CardContent>
                    <Typography variant="h5" component="div">
                      {project.project.projectName}
                    </Typography>
                    <Typography variant="subtitle1" color="textSecondary">
                      {project.project.description}
                    </Typography>
                    <Typography variant="body2" color="textSecondary">
                      Start Date: {formatDate(project.project.startDate)}
                    </Typography>
                    <Typography variant="body2" color="textSecondary">
                      End Date: {formatDate(project.project.endDate)}
                    </Typography>
                    <Typography variant="body2" color="textSecondary">
                      Status: {project.project.status}
                    </Typography>
                    {expandedProjectId === project.project.projectId ? (
                      <div>
                        <Typography variant="body2" color="textSecondary">
                          Members:
                        </Typography>
                        <ul>
                          {project.members.map((member, memberIndex) => (
                            <li key={member.user_id}>
                              <Typography variant="body2">
                                Username: {member.username}
                              </Typography>
                              <Typography variant="body2">
                                Email: {member.email}
                              </Typography>
                            </li>
                          ))}
                        </ul>
                        <IconButton
                          onClick={() =>
                            handleExpandMembers(project.project.projectId)
                          }
                          disabled={openProjectId === project.project.projectId}
                        >
                          <CloseIcon />
                        </IconButton>
                      </div>
                    ) : (
                      <div>
                        <Button
                          variant="outlined"
                          onClick={() =>
                            handleExpandMembers(project.project.projectId)
                          }
                        >
                          See Members Assigned
                        </Button>
                        <IconButton
                          onClick={() => handleOpen(project.project)}
                          disabled={openProjectId === project.project.projectId}
                        >
                          <EditIcon />
                        </IconButton>
                        <IconButton>
                          <DeleteIcon />
                        </IconButton>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </Grid>
            ))}
          </Grid>
        ) : (
          <Typography variant="h5" component="div" align="center">
            No projects found.
          </Typography>
        )}

        {/* Dialog / Modal for Edit Form */}
        {formattedData.map((project, index) => (
          <Dialog
            key={index}
            open={openProjectId === project.project.projectId}
            onClose={handleClose}
          >
            <DialogTitle>Edit Project</DialogTitle>
            <DialogContent>
              <form onSubmit={handleSubmit(handleSave)}>
                {/* Project Name */}
                <TextField
                  label="Project Name"
                  value={editProjectData.projectName}
                  onChange={(e) =>
                    setEditProjectData((prev) => ({
                      ...prev,
                      projectName: e.target.value,
                    }))
                  }
                  fullWidth
                  margin="normal"
                  defaultValue={editProjectData.projectName}
                  error={!!errors.projectName}
                  helperText={errors.projectName?.message}
                />

                <TextField
                  label="Task"
                  value={editProjectData.description}
                  onChange={(e) =>
                    setEditProjectData((prev) => ({
                      ...prev,
                      description: e.target.value,
                    }))
                  }
                  fullWidth
                  margin="normal"
                  defaultValue={editProjectData.description}
                  error={!!errors.description}
                  helperText={errors.description?.message}
                />

                <TextField
                  label="Start Date"
                  value={editProjectData.startDate}
                  onChange={(e) =>
                    setEditProjectData((prev) => ({
                      ...prev,
                      startDate: e.target.value,
                    }))
                  }
                  fullWidth
                  margin="normal"
                  defaultValue={editProjectData.startDate}
                  error={!!errors.startDate}
                  helperText={errors.startDate?.message}
                />

                <TextField
                  label="End Date"
                  value={editProjectData.endDate}
                  onChange={(e) =>
                    setEditProjectData((prev) => ({
                      ...prev,
                      endDate: e.target.value,
                    }))
                  }
                  fullWidth
                  margin="normal"
                  defaultValue={editProjectData.endDate}
                  error={!!errors.endDate}
                  helperText={errors.endDate?.message}
                />

                {/* Status */}
                <Autocomplete
                  value={statusData}
                  onChange={(event, newValue) => {
                    setStatusData(newValue);
                    setValue("status", newValue?.label);
                  }}
                  isOptionEqualToValue={(option, value) =>
                    option.label === value.label
                  }
                  options={statusOptions}
                  getOptionLabel={(option) => option.label}
                  renderInput={(params) => (
                    <TextField
                      {...params}
                      label="Status"
                      fullWidth
                      {...register("status")}
                      error={!!errors.status}
                      helperText={errors.status?.message}
                    />
                  )}
                />

                {/* Urgency */}
                <Autocomplete
                  value={urgencyData}
                  onChange={(event, newValue) => {
                    setUrgencyData(newValue);
                    setValue("urgency", newValue?.label);
                  }}
                  isOptionEqualToValue={(option, value) =>
                    option.label === value.label
                  }
                  options={urgencyOptions}
                  getOptionLabel={(option) => option.label}
                  renderInput={(params) => (
                    <TextField
                      {...params}
                      label="Urgency"
                      fullWidth
                      {...register("urgency")}
                      error={!!errors.urgency}
                      helperText={errors.urgency?.message}
                    />
                  )}
                />

                {/* Category */}
                <Autocomplete
                  value={categoryData}
                  onChange={(event, newValue) => {
                    setCategoryData(newValue);
                    setValue("category", newValue?.label);
                  }}
                  isOptionEqualToValue={(option, value) =>
                    option.label === value.label
                  }
                  options={projectCategories}
                  getOptionLabel={(option) => option.label}
                  renderInput={(params) => (
                    <TextField
                      {...params}
                      label="Category"
                      fullWidth
                      {...register("category")}
                      error={!!errors.category}
                      helperText={errors.category?.message}
                    />
                  )}
                />

                {/* Assigned Members */}
                <Autocomplete
                  multiple
                  options={userList}
                  getOptionLabel={(option) => option.username}
                  onChange={handleMemberSelection}
                  isOptionEqualToValue={(option, value) =>
                    option.user_id === value.user_id
                  }
                  renderTags={(value, getTagProps) =>
                    value.map((option, index) => (
                      <Chip
                        variant="outlined"
                        label={option.username}
                        {...getTagProps({ index })}
                      />
                    ))
                  }
                  renderInput={(params) => (
                    <TextField {...params} label="Assign to Members" />
                  )}
                />

                <DialogActions>
                  <Button onClick={handleClose}>Cancel</Button>
                  <Button type="submit" color="primary">
                    Save
                  </Button>
                </DialogActions>
              </form>
            </DialogContent>
          </Dialog>
        ))}
      </div>
      <ToastContainer />
    </>
  );
}

export default ExistingProjects;


import  { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { CircularProgress, Grid, Card, CardContent, Typography, Button, IconButton } from "@mui/material";
import { Edit as EditIcon, Delete as DeleteIcon, Close as CloseIcon } from "@mui/icons-material";
import { getProjectWithMembers, updateProject, updateAssignedMembersToProject } from "../redux/apiCall";
import EditProjectDialog from "../components/EditProjectDialog";

function ExistingProjects() {
  const dispatch = useDispatch();
  const projectWithMembers = useSelector((state) => state.projectWithMembers.projectWithMembers);
  const user = useSelector((state) => state.user.user);
  const userList = useSelector((state) => state.userList.userList);

  const [isLoading, setIsLoading] = useState(true);
  const [projectsWithMembers, setProjectsWithMembers] = useState([]);
  const [editProjectData, setEditProjectData] = useState({});
  const [assignedMembers, setAssignedMembers] = useState([]);
  const [openProjectId, setOpenProjectId] = useState(null);

  // Define projectCategories, urgencyOptions, and statusOptions here
  const projectCategories = [
    { label: "Technology" },
    { label: "Marketing" },
    { label: "Sales" },
    { label: "Construction" },
    { label: "Event Management" },
    { label: "Finance" },
    { label: "Human Resources" },
    { label: "Research and Development" },
  ];

  const urgencyOptions = [
    { label: "Low" },
    { label: "Medium" },
    { label: "High" },
  ];

  const statusOptions = [
    { label: "Pending Start" },
    { label: "In Progress", disabled: true },
    { label: "Completed", disabled: true },
  ];

  useEffect(() => {
    getProjectWithMembers(dispatch, user)
      .then((projectWithMembers) => {
        if (Array.isArray(projectWithMembers)) {
          const formattedData = formatData(projectWithMembers);
          setProjectsWithMembers(formattedData);
          console.log(formattedData); // Log the formattedData instead
          setIsLoading(false);
        } else {
          console.log("Invalid data format");
          console.log(projectWithMembers);
          setIsLoading(false);
        }
      })
      .catch((error) => {
        console.log(error);
        setIsLoading(false);
      });
  }, [dispatch, user]);
  
  const formatData = (data) => {
    const formattedData = {};
  
    data.forEach((item) => {
      const projectId = item.projectId;
      const member = {
        user_id: item.user_id,
        username: item.username,
        email: item.email,
      };
  
      if (projectId in formattedData) {
        formattedData[projectId].members.push(member);
      } else {
        formattedData[projectId] = { project: item, members: [member] };
      }
    });
  
    const formattedList = Object.values(formattedData);
  
    return formattedList;
  };
  

  const formatDate = (dateStr) => {
    const date = new Date(dateStr);
    return date.toLocaleDateString("en-US");
  };

  const handleOpen = (project) => {
    const formattedStartDate = formatDate(project.startDate);
    const formattedEndDate = formatDate(project.endDate);

    const newEditProject = {
      projectId: project.projectId,
      projectName: project.projectName,
      description: project.description,
      startDate: formattedStartDate,
      endDate: formattedEndDate,
      status: project.status,
      urgency: project.urgency,
      category: project.category,
    };

    setEditProjectData(newEditProject);
    setOpenProjectId(project.projectId);
  };

  const handleClose = () => {
    setOpenProjectId(null);
  };

  const handleSave = async () => {
    const isValidMembers = assignedMembers.every((memberId) =>
      userList.some((user) => user.user_id === memberId)
    );

    if (!isValidMembers) {
      toast.error("Invalid member(s) entered");
      return;
    }

    try {
      const updatedProjectData = {
        ...editProjectData,
      };
      const projectId = editProjectData.projectId;
      await updateProject(updatedProjectData, projectId, user, dispatch);

      await updateAssignedMembersToProject(projectId, assignedMembers, user, dispatch);

      toast.success("Project updated successfully");
      setOpenProjectId(null);

      const updatedProjectsWithMembers = projectsWithMembers.map((project) => {
        if (project.project.projectId === projectId) {
          return {
            ...project,
            project: updatedProjectData,
          };
        } else {
          return project;
        }
      });
      setProjectsWithMembers(updatedProjectsWithMembers);
    } catch (error) {
      toast.error("Failed to update project");
      console.log(error);
    }
  };

  return (
    <>
      <div>
        {isLoading ? (
          <div style={{ display: 'flex', height: '100vh', width: '80vw', alignItems: 'center', justifyContent: 'center' }}>
            <CircularProgress />
          </div>
        ) : projectsWithMembers && projectsWithMembers.length > 0 ? (
          <Grid container spacing={3}>
            {projectsWithMembers.map((project, index) => (
              <Grid item xs={12} sm={6} md={4} key={index}>
                <Card>
                  <CardContent>
                    <Typography variant="h5" component="div">
                      {project.project.projectName}
                    </Typography>
                    <Typography variant="subtitle1" color="textSecondary">
                      {project.project.description}
                    </Typography>
                    <Typography variant="body2" color="textSecondary">
                      Start Date: {formatDate(project.project.startDate)}
                    </Typography>
                    <Typography variant="body2" color="textSecondary">
                      End Date: {formatDate(project.project.endDate)}
                    </Typography>
                    <Typography variant="body2" color="textSecondary">
                      Status: {project.project.status}
                    </Typography>
                    {openProjectId === project.project.projectId ? (
                      <div>
                        <Typography variant="body2" color="textSecondary">
                          Members:
                        </Typography>
                        <ul>
                          {project.members.map((member, memberIndex) => (
                            <li key={member.user_id}>
                              <Typography variant="body2">
                                Username: {member.username}
                              </Typography>
                              <Typography variant="body2">
                                Email: {member.email}
                              </Typography>
                            </li>
                          ))}
                        </ul>
                        <IconButton
                          onClick={() => setOpenProjectId(null)}
                          disabled={openProjectId !== project.project.projectId}
                        >
                          <CloseIcon />
                        </IconButton>
                      </div>
                    ) : (
                      <div>
                        <Button
                          variant="outlined"
                          onClick={() => setOpenProjectId(project.project.projectId)}
                        >
                          See Members Assigned
                        </Button>
                        <IconButton
                          onClick={() => handleOpen(project.project)}
                          disabled={openProjectId !== null}
                        >
                          <EditIcon />
                        </IconButton>
                        <IconButton>
                          <DeleteIcon />
                        </IconButton>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </Grid>
            ))}
          </Grid>
        ) : (
          <Typography variant="h5" component="div" align="center">
            No projects found.
          </Typography>
        )}

        <EditProjectDialog
          open={openProjectId !== null}
          handleClose={handleClose}
          handleSave={handleSave}
          editProjectData={editProjectData}
          assignedMembersData={setAssignedMembers}
          categoryData={projectCategories}
          urgencyData={urgencyOptions}
          statusData={statusOptions}
          userList={userList}
        />
      </div>
      <ToastContainer />
    </>
  );
}

export default ExistingProjects;

import React from "react";
import { Autocomplete, TextField, Chip } from "@mui/material";

const EditProjectDialogFormFields = ({
  editProjectData,
  errors,
  setValue,
  assignedMembersData,
  categoryData,
  urgencyData,
  statusData,
  userList,
  handleMemberSelection,
}) => {
  return (
    <>
      {/* Project Name */}
      <TextField
        label="Project Name"
        value={editProjectData.projectName}
        onChange={(e) =>
          setValue("projectName", e.target.value)
        }
        fullWidth
        margin="normal"
        defaultValue={editProjectData.projectName}
        error={!!errors.projectName}
        helperText={errors.projectName?.message}
      />

      {/* Description */}
      <TextField
        label="Description"
        value={editProjectData.description}
        onChange={(e) =>
          setValue("description", e.target.value)
        }
        fullWidth
        margin="normal"
        defaultValue={editProjectData.description}
        error={!!errors.description}
        helperText={errors.description?.message}
      />

      {/* Start Date */}
      <TextField
        label="Start Date"
        value={editProjectData.startDate}
        onChange={(e) =>
          setValue("startDate", e.target.value)
        }
        fullWidth
        margin="normal"
        defaultValue={editProjectData.startDate}
        error={!!errors.startDate}
        helperText={errors.startDate?.message}
      />

      {/* End Date */}
      <TextField
        label="End Date"
        value={editProjectData.endDate}
        onChange={(e) =>
          setValue("endDate", e.target.value)
        }
        fullWidth
        margin="normal"
        defaultValue={editProjectData.endDate}
        error={!!errors.endDate}
        helperText={errors.endDate?.message}
      />

      {/* Status */}
      <Autocomplete
        value={statusData}
        onChange={(event, newValue) => {
          statusData(newValue);
          setValue("status", newValue?.label);
        }}
        isOptionEqualToValue={(option, value) => option.label === value.label}
        options={statusOptions}
        getOptionLabel={(option) => option.label}
        renderInput={(params) => (
          <TextField
            {...params}
            label="Status"
            fullWidth
            error={!!errors.status}
            helperText={errors.status?.message}
          />
        )}
      />

      {/* Urgency */}
      <Autocomplete
        value={urgencyData}
        onChange={(event, newValue) => {
          urgencyData(newValue);
          setValue("urgency", newValue?.label);
        }}
        isOptionEqualToValue={(option, value) => option.label === value.label}
        options={urgencyOptions}
        getOptionLabel={(option) => option.label}
        renderInput={(params) => (
          <TextField
            {...params}
            label="Urgency"
            fullWidth
            error={!!errors.urgency}
            helperText={errors.urgency?.message}
          />
        )}
      />

      {/* Category */}
      <Autocomplete
        value={categoryData}
        onChange={(event, newValue) => {
          categoryData(newValue);
          setValue("category", newValue?.label);
        }}
        isOptionEqualToValue={(option, value) => option.label === value.label}
        options={projectCategories}
        getOptionLabel={(option) => option.label}
        renderInput={(params) => (
          <TextField
            {...params}
            label="Category"
            fullWidth
            error={!!errors.category}
            helperText={errors.category?.message}
          />
        )}
      />

      {/* Assigned Members */}
      <Autocomplete
        multiple
        options={userList}
        getOptionLabel={(option) => option.username}
        onChange={handleMemberSelection}
        isOptionEqualToValue={(option, value) => option.user_id === value.user_id}
        renderTags={(value, getTagProps) =>
          value.map((option, index) => (
            <Chip variant="outlined" label={option.username} {...getTagProps({ index })} />
          ))
        }
        renderInput={(params) => <TextField {...params} label="Assign to Members" />}
      />
    </>
  );
};

export default EditProjectDialogFormFields;


import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { getProjectWithMembers } from "../redux/apiCall";
import { CircularProgress, Card, CardContent, Typography, Grid, Button, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, IconButton } from "@mui/material";
import CloseIcon from "@mui/icons-material/Close";
import EditIcon from "@mui/icons-material/Edit";
import DeleteIcon from "@mui/icons-material/Delete";
import EditProjectDialog from "../components/EditProjectDialog";

function ExistingProjects() {
  const dispatch = useDispatch();
  const projectWithMembers = useSelector((state) => state.projectWithMembers.projectWithMembers);
  const user = useSelector((state) => state.user.user);
  const userList = useSelector((state) => state.userList.userList);

  const [selectedProject, setSelectedProject] = useState(null);
  const [openDialog, setOpenDialog] = useState(false);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    getProjectsWithMembers();
  }, []);

  const getProjectsWithMembers = async () => {
    try {
      setIsLoading(true);
      await getProjectWithMembers(dispatch, user);
      setIsLoading(false);
    } catch (error) {
      setIsLoading(false);
      console.error("Error fetching project data:", error);
    }
  };

  const formatDate = (dateStr) => {
    const date = new Date(dateStr);
    return date.toLocaleDateString("en-US");
  };

  const groupedProjects = projectWithMembers.reduce((result, project) => {
    const existingProject = result.find((p) => p.projectId === project.projectId);
    if (existingProject) {
      existingProject.members.push({
        username: project.username,
        email: project.email
      });
    } else {
      result.push({
        projectId: project.projectId,
        projectName: project.projectName,
        description: project.description,
        startDate: project.startDate,
        endDate: project.endDate,
        urgency: project.urgency,
        category: project.category,
        status: project.status,
        members: [
          {
            username: project.username,
            email: project.email
          }
        ]
      });
    }
    return result;
  }, []);

  const handleViewMembers = (project) => {
    setSelectedProject(project);
    setOpenDialog(true);
  };

  const handleCloseDialog = () => {
    setSelectedProject(null);
    setOpenDialog(false);
  };

  const handleEditProject = (projectId) => {
    const selectedProject = groupedProjects.find((project) => project.projectId === projectId);
    setSelectedProject(selectedProject);
    setOpenDialog(true);
  };

  const handleSave = (data) => {
    // Implement the logic to save the project data
    console.log("Saving project data:", data);
  };

  const handleDeleteProject = (projectId) => {
    // Implement the logic to handle deleting a project
    console.log("Delete project with ID:", projectId);
  };

  // Define the options for status field
  const statusOptions = [
    { label: "Pending" },
    { label: "In Progress" },
    { label: "Completed" },
  ];

  // Define the options for urgency field
  const urgencyOptions = [
    { label: "Low" },
    { label: "Medium" },
    { label: "High" },
  ];

  // Define the options for category field
  const categoryOptions = [
    { label: "Category 1" },
    { label: "Category 2" },
    { label: "Category 3" },
  ];

  return (
    <Grid container spacing={2}>
      {isLoading ? (
        <Grid item xs={12} align="center">
          <CircularProgress />
        </Grid>
      ) : (
        groupedProjects.map((project) => (
          <Grid item xs={12} sm={6} md={4} lg={3} key={project.projectId}>
            <Card>
              <CardContent>
                <Typography variant="h5" component="h2">
                  {project.projectName}
                </Typography>
                <Typography variant="body2" color="textSecondary" component="div">
                  {project.description}
                </Typography>
                <Typography variant="body2" color="textSecondary" component="div">
                  Start Date: {formatDate(project.startDate)}
                </Typography>
                <Typography variant="body2" color="textSecondary" component="div">
                  End Date: {formatDate(project.endDate)}
                </Typography>
                <Typography variant="body2" color="textSecondary" component="div">
                  Urgency: {project.urgency}
                </Typography>
                <Typography variant="body2" color="textSecondary" component="div">
                  Category: {project.category}
                </Typography>
                <Typography variant="body2" color="textSecondary" component="div">
                  Status: {project.status}
                </Typography>
                <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
                  <Button
                    variant="contained"
                    color="primary"
                    onClick={() => handleViewMembers(project)}
                    style={{ marginTop: "10px" }}
                    disableElevation // Disable button elevation to prevent focus outline
                  >
                    View Members
                  </Button>
                  <IconButton
                    style={{ padding: "2px" }}
                    color="primary"
                    onClick={() => handleEditProject(project.projectId)}
                    aria-label="edit"
                  >
                    <EditIcon />
                  </IconButton>
                  <IconButton
                    style={{ padding: "2px" }}
                    color="secondary"
                    onClick={() => handleDeleteProject(project.projectId)}
                    aria-label="delete"
                  >
                    <DeleteIcon />
                  </IconButton>
                </div>
              </CardContent>
            </Card>
          </Grid>
        ))
      )}
      {selectedProject && (
        <Dialog open={openDialog} onClose={handleCloseDialog}>
          <DialogTitle style={{ marginTop: "-10px" }}>{selectedProject.projectName}</DialogTitle>
          <DialogTitle style={{ marginTop: "-35px", fontSize: "15px" }}>Assigned Members</DialogTitle>
          <hr style={{ width: "90%", marginTop: "-13px", marginBottom: "-16px" }} />
          <DialogContent>
            <DialogContentText>
              {selectedProject.members.map((member) => (
                <Typography key={member.email}>
                  Username: {member.username}
                  <br />
                  Email: {member.email}
                  <hr />
                </Typography>
              ))}
            </DialogContentText>
          </DialogContent>
          <DialogActions>
            <IconButton edge="end" color="inherit" onClick={handleCloseDialog} aria-label="close">
              <CloseIcon />
            </IconButton>
          </DialogActions>
        </Dialog>
      )}
      {selectedProject && (
        <EditProjectDialog
          open={openDialog}
          handleClose={handleCloseDialog}
          handleSave={handleSave}
          editProjectData={selectedProject}
          assignedMembersData={selectedProject.members}
          categoryData={selectedProject.category}
          urgencyData={selectedProject.urgency}
          statusData={selectedProject.status}
          userList={userList}
          statusOptions={statusOptions}
          urgencyOptions={urgencyOptions}
          categoryOptions={categoryOptions}
        />
      )}
    </Grid>
  );
}

export default ExistingProjects;
